#!/bin/bash

set -eu
set -o pipefail

SCRIPT_SRC=${BASH_SOURCE[0]}
# Resolve $SCRIPT_SRC until the file is no longer a symlink.
while [ -L "$SCRIPT_SRC" ]; do
    SCRIPT_DIR=$(cd -P "$(dirname "$SCRIPT_SRC")" > /dev/null 2>&1 && pwd)
    SCRIPT_SRC=$(readlink "$SCRIPT_SRC")
    # If $SCRIPT_SRC was a relative symlink, we need to resolve it relative to the path
    # where the symlink file was located.
    [[ $SCRIPT_SRC != /* ]] && SCRIPT_SRC=$SCRIPT_DIR/$SCRIPT_SRC
done
SCRIPT_DIR=$(cd -P "$(dirname "$SCRIPT_SRC")" > /dev/null 2>&1 && pwd)

declare -r USER_HOME=/home/$SUDO_USER
declare -r USER_RC=$USER_HOME/.bashrc
declare -a path_additions=('"$HOME"/bin' '"$HOME"/.local/bin')

installUser() {
    local dest_dir
    local file_to_copy
    dest_dir=$1
    file_to_copy=${2:-}

    mkdir -v -p "$dest_dir"
    chown -v -R "$SUDO_USER":"$SUDO_USER" "$dest_dir"

    if [ -n "$file_to_copy" ]; then
        install -v --owner "$SUDO_USER" --group "$SUDO_USER" -t "$dest_dir" "$file_to_copy"
    fi
}

in_wsl() {
    [ -e /proc/sys/fs/binfmt_misc/WSLInterop ]
}

show() {
    echo
    echo "***"
    echo "*** $*"
    echo "***"
    echo
}

show_done() {
    show "Done."
}

file_append_line() {
    local file=$1
    local line=$2

    echo -n "Checking file '$file' for line '$line'... "

    if ! grep -q -F "$line" "$file"; then
        echo "no, appending"
        echo "$line" >> "$file"
    else
        echo "yes"
    fi
}

add_user_to_group() {
    local user=$1
    local group=$2

    show "Adding user '$user' to the '$group' group..."
    if groups "$user" | grep -q "$group"; then
        show "User '$user' is already a member of the '$group' group. Skipping!"
    else
        usermod -a -G "$group" "$user"
        show_done
    fi
}

if [[ $EUID -ne 0 ]]; then
    show "This script must be run as root"
    exit 1
fi

if [ -z "${SUDO_USER:-}" ]; then
    echo "ERROR! The 'SUDO_USER' variable is blank! I was depending on that to determine who called me. :(" >&2
    exit 1
fi

if ! grep -q 'ubuntu' /etc/os-release; then
    echo "Error: I don't think you're running Ubuntu and I only know how to initialize that system." >&2
    exit 1
fi

show "Updating packages..."
apt-get update
apt-get upgrade -y
show_done

show "Installing packages..."
apt-get install -y \
    apt-show-versions \
    aptitude \
    asciinema \
    atool \
    autoconf \
    autopoint \
    autossh \
    autotools-dev \
    bison \
    btop \
    build-essential \
    ccache \
    clang \
    clang-format \
    cmake \
    cppcheck \
    cscope \
    curl \
    ddd \
    device-tree-compiler \
    direnv \
    dos2unix \
    efibootmgr \
    exuberant-ctags \
    flex \
    fzf \
    gawk \
    gcc-multilib \
    gdb-multiarch \
    gnome-tweaks \
    gparted \
    graphviz \
    groff \
    htop \
    hwinfo \
    indent \
    jq \
    libssl-dev \
    libvirt-clients \
    libvirt-dev \
    linux-tools-generic \
    lua5.1 \
    luarocks \
    nasm \
    net-tools \
    ninja-build \
    openjdk-8-jdk \
    openjdk-8-jdk-headless \
    openssh-server \
    openssh-server \
    p7zip-full \
    parted \
    picocom \
    pipx \
    pre-commit \
    protobuf-compiler \
    pv \
    python3-pip \
    python3-stestr \
    python3-venv \
    qemu-system-x86 \
    remake \
    ripgrep \
    rlwrap \
    rpm \
    ruby \
    ruby-dev \
    shellcheck \
    sshfs \
    strace \
    texinfo \
    tmate \
    tmux \
    tree \
    usbutils \
    uuid \
    uuid-dev \
    valgrind \
    vim \
    virtualenv \
    xsel \
    zip \
    zlib1g-dev
show_done

show "Installing Starship..."
if command -v starship > /dev/null; then
    show 'Already installed. Skipping!'
else
    sh <(curl -sS https://starship.rs/install.sh) -y
fi
show_done

show "Installing Signal..."
# Taken from https://signal.org/en/download/linux/
# NOTE: These instructions only work for 64 bit Debian-based
# Linux distributions such as Ubuntu, Mint etc.
if in_wsl; then
    show 'This is a WSL machine. Skipping!'
elif command -v signal-desktop > /dev/null; then
    show 'Already installed. Skipping!'
else
    # 1. Install our official public software signing key
    wget -O- https://updates.signal.org/desktop/apt/keys.asc | gpg --dearmor > /tmp/signal-desktop-keyring.gpg
    cat /tmp/signal-desktop-keyring.gpg > /usr/share/keyrings/signal-desktop-keyring.gpg

    # 2. Add our repository to your list of repositories
    echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main' > /etc/apt/sources.list.d/signal-xenial.list

    # 3. Update your package database and install signal
    apt-get update && apt-get install -y signal-desktop
fi
show_done

show "Installing Discord..."
if in_wsl; then
    show 'This is a WSL machine. Skipping!'
elif command -v discord > /dev/null; then
    show 'Already installed. Skipping!'
else
    wget -O /tmp/discord.deb 'https://discordapp.com/api/download?platform=linux&format=deb'
    apt-get install -y /tmp/discord.deb
    rm /tmp/discord.deb
fi
show_done

show "Installing Slack..."
if in_wsl; then
    show 'This is a WSL machine. Skipping!'
elif command -v slack > /dev/null; then
    show 'Already installed. Skipping!'
else
    snap install slack
fi
show_done

show "Installing awscli..."
if command -v aws > /dev/null; then
    show 'Already installed. Skipping!'
else
    tmp=$(mktemp -d)
    pushd "$tmp"
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    unzip awscliv2.zip
    ./aws/install
    popd
    rm -rf "$tmp"
fi
show_done

show "Installing google-drive-ocamlfuse..."
if command -v google-drive-ocamlfuse > /dev/null; then
    show 'Already installed. Skipping!'
else
    sudo add-apt-repository -y ppa:alessandro-strada/ppa
    sudo apt-get update
    sudo apt-get install -y google-drive-ocamlfuse
fi

show "Installing NVM and node..."
if [ -e "$USER_HOME/.nvm_installed" ]; then
    show 'Already installed. Skipping!'
else
    sudo -u "$SUDO_USER" bash -c "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash"
    sudo -u "$SUDO_USER" bash -c "export NVM_DIR='$USER_HOME/.nvm' && source \"\$NVM_DIR/nvm.sh\" && nvm install node"
    touch "$USER_HOME/.nvm_installed"
    chown "$SUDO_USER:$SUDO_USER" "$USER_HOME/.nvm_installed"
fi
show_done

show "Installing Neovim..."
if command -v nvim > /dev/null; then
    show 'Already installed. Skipping!'
else
    wget -O /tmp/nvim.tgz https://github.com/neovim/neovim/releases/latest/download/nvim-linux-$(uname -m).tar.gz
    tar -C /usr/local --strip-components 1 -xzf /tmp/nvim.tgz
    rm /tmp/nvim.tgz
    installUser "$USER_HOME"/.config/nvim
    cp -v -r "$SCRIPT_DIR"/nvim/* "$USER_HOME"/.config/nvim
    chown -R "$SUDO_USER":"$SUDO_USER" "$USER_HOME"/.config/nvim
fi
show_done

show "Installing Google Chrome..."
if in_wsl; then
    show 'This is a WSL machine. Skipping!'
elif command -v google-chrome > /dev/null; then
    show 'Already installed. Skipping!'
else
    wget -O /tmp/google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
    apt-get install -y /tmp/google-chrome.deb
    rm /tmp/google-chrome.deb
fi
show_done

show "Installing 1Password GUI..."
if in_wsl; then
    show 'This is a WSL machine. Skipping!'
elif command -v 1password > /dev/null; then
    show 'Already installed. Skipping!'
else
    curl -sS https://downloads.1password.com/linux/keys/1password.asc |
        gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
    echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main' > /etc/apt/sources.list.d/1password.list
    mkdir -p /etc/debsig/policies/AC2D62742012EA22/
    curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol > \
        /etc/debsig/policies/AC2D62742012EA22/1password.pol
    mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
    curl -sS https://downloads.1password.com/linux/keys/1password.asc \
        --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg > gpg
    apt-get update
    apt-get install -y 1password
fi
show_done

show "Installing Rust and Cargo..."
if [ -e "$USER_HOME"/.cargo/env ]; then
    show 'Already installed. Skipping!'
else
    sudo -u "$SUDO_USER" -- curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs |
        sudo -u "$SUDO_USER" -- sh -s -- -y --no-modify-path
    path_additions+=('"$HOME"/.cargo/bin')
    show_done
fi

show "Installing Go..."
if [ -e /usr/local/go ]; then
    show 'Already installed. Skipping!'
else
    #Download Latest Go
    echo "Finding latest version of Go for AMD64... "
    latest=$(wget -nv -O- https://go.dev/dl/)
    latest=$(grep -oP -m1 'go(\d+\.){3}linux-amd64\.tar\.gz' - <<< "$latest")
    if [ -z "$latest" ]; then
        echo "Error determining latest Go version!"
        exit 1
    fi
    url=https://go.dev/dl/"$latest"
    echo "Downloading latest Go: $latest"
    wget --quiet --continue --show-progress "$url"
    unset url

    # Remove Old Go
    rm -rf /usr/local/go

    # Install new Go
    tar -C /usr/local -xzf "$latest"
    echo "Create the skeleton for your local users go directory"
    mkdir -p "$SUDO_USER"/go/{bin,pkg,src}
    echo "Setting up GOPATH"
    echo $'\n''export GOPATH=$HOME/go'$'\n' >> "$USER_RC"
    echo "Setting PATH to include golang binaries"
    path_additions+=('/usr/local/go/bin' '"$GOPATH"/bin')

    # Remove Download
    rm "$latest"

    # Print Go Version
    /usr/local/go/bin/go version
fi
show_done

show "Setting up Docker..."
if command -v docker > /dev/null; then
    show 'Already installed. Skipping!'
else
    for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do
        apt-get remove -y "$pkg"
    done

    install -m 0755 -d /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    chmod a+r /etc/apt/keyrings/docker.gpg

    rm -f /etc/apt/sources.list.d/docker.list
    echo \
        "deb [arch=$(dpkg --print-architecture)" \
        'signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu' \
        "$(. /etc/os-release && echo "$VERSION_CODENAME") stable" > \
        /etc/apt/sources.list.d/docker.list

    apt-get update
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    docker run hello-world
fi

add_user_to_group "$SUDO_USER" docker

show "Sanity checking docker AS '$SUDO_USER' via docker.io..."

# We are running as root but we want to try
# running docker as the user who used sudo
if ! su -c 'docker run hello-world' "$SUDO_USER"; then
    show "ERROR! Docker is misconfigured. Please contact a human for help."
    exit 1
fi
show_done

show "Allowing no password when using sudo..."
sed -i 's/^%sudo.*/%sudo ALL=NOPASSWD: ALL/' /etc/sudoers
show_done

show "Installing default vimrc..."
if [ -e "/home/$SUDO_USER/.vimrc" ]; then
    show 'Already installed. Skipping!'
else
    cp -v "$SCRIPT_DIR"/vimrc "$USER_HOME"/.vimrc
    chown "$SUDO_USER":"$SUDO_USER" "$USER_HOME"/.vimrc
    installUser "$USER_HOME"/.vim/pack/plugins/start/cscope/plugin/ "$SCRIPT_DIR"/cscope_maps.vim
    installUser "$USER_HOME"/.vim/spell
    show_done
fi

show "Installing default tmux conf..."
if [ -e "/home/$SUDO_USER/.tmux.conf" ]; then
    show 'Already installed. Skipping!'
else
    cp -v "$SCRIPT_DIR"/tmux.conf "$USER_HOME"/.tmux.conf
    chown "$SUDO_USER":"$SUDO_USER" "$USER_HOME"/.tmux.conf
    show_done
fi

show "Removing useless home directories..."
rm -rf "$USER_HOME"/{Public,Templates,Music}
show_done

show "Adding useful home directories..."
dir_list=$(echo -n "$USER_HOME"/{Applications,Downloads,GoogleDrive,Learn,Repos})
mkdir -p $dir_list
chown "$SUDO_USER:$SUDO_USER" -R $dir_list
show_done

show "Generating SSH Key pair..."
declare -r KEY_TYPE=ed25519
declare -r KEY_PATH=/home/$SUDO_USER/.ssh/id_$KEY_TYPE
if [ -e "$KEY_PATH" ]; then
    show 'Already generated. Skipping!'
else
    sudo -H -u "$SUDO_USER" ssh-keygen -t "$KEY_TYPE" -N '' -f "$KEY_PATH"
fi
show_done

show "Updating this repo's origin remote from http to ssh..."
(cd "$SCRIPT_DIR" && git remote set-url origin git@github.com:pdietl/dev_tools.git)
show_done

declare -r BIN_DEST=$USER_HOME/bin

show "Installing user binaries into $BIN_DEST..."
if ! [ -e "$BIN_DEST" ]; then
    mkdir -p "$BIN_DEST"
    cp -v -r "$SCRIPT_DIR"/bin/* "$BIN_DEST"
    chown "$SUDO_USER:$SUDO_USER" -R "$BIN_DEST"
    show_done
else
    show "$BIN_DEST already exists. Skipping!"
fi

if ! [ -e "$USER_HOME/.gitconfig" ]; then
    echo '[user]
    name = Pete Dietl
    email = petedietl@gmail.com
[core]
    editor = vim
    excludesfile = ~/.gitignore_global
[init]
    defaultBranch = main' > "$USER_HOME/.gitconfig"
    chown "$SUDO_USER:$SUDO_USER" "$USER_HOME/.gitconfig"
    cp -v "$SCRIPT_DIR"/gitignore_global "$USER_HOME"/.gitignore_global
    chown "$SUDO_USER:$SUDO_USER" "$USER_HOME"/.gitignore_global
fi

add_user_to_group "$SUDO_USER" dialout
add_user_to_group "$SUDO_USER" plugdev

gsettings_set() {
    local schema=$1
    local key=$2
    local value=$3

    sudo -H -u "$SUDO_USER" \
        DISPLAY=:0 \
        DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/"$(id -u "$SUDO_USER")"/bus \
        gsettings set "$schema" "$key" "$value"
}

show "Set GNOME settings..."
if in_wsl; then
    show 'This is a WSL machine. Skipping!'
elif command -v gsettings > /dev/null; then
    show "Setting GNOME to use 12-hr time..."
    gsettings_set org.gnome.desktop.interface clock-format 12h
    show_done
    show "Setting GNOME desktop favorite apps..."
    favorite_apps="[
        'google-chrome.desktop',
        'org.gnome.Nautilus.desktop',
        'signal-desktop.desktop',
        'discord.desktop',
        'slack_slack.desktop'
    ]"
    gsettings_set org.gnome.shell favorite-apps "$favorite_apps"
    show_done
    show "Setting GNOME tweak to interpret two finger click as right click..."
    gsettings_set org.gnome.desktop.peripherals.touchpad click-method fingers
else
    show "GNOME shell not present. Skipping!"
fi
show_done

show "Installing udev rules..."
cp -v "$SCRIPT_DIR"/udev_rules/* /etc/udev/rules.d/
udevadm control --reload
show_done

show "Installing gdbinit..."
cp -v "$SCRIPT_DIR"/gdbinit "$USER_HOME"/.gdbinit
chown "$SUDO_USER":"$SUDO_USER" "$USER_HOME"/.gdbinit
show_done

show "Installing Nix..."
if [ -e /etc/.nix-installed ]; then
    show 'Already installed. Skipping!'
else
    sh <(curl -L https://nixos.org/nix/install) --daemon --yes
    echo "trusted-users = $SUDO_USER" >> /etc/nix/nix.conf
    installUser "$USER_HOME/.config/nix" "$SCRIPT_DIR/nix.conf"
    touch /etc/.nix-installed
fi
show_done

show "Installing 0xProto Nerd Font"
if in_wsl; then
    show 'This is a WSL machine. Skipping!'
elif ! [ -e "$USER_HOME/.fonts/0xProtoNerdFontMono-Regular.ttf" ]; then
    wget -O /tmp/nerdfont.zip https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/0xProto.zip
    mkdir -p "$USER_HOME"/.fonts
    aunpack --extract-to "$USER_HOME"/.fonts /tmp/nerdfont.zip
    rm /tmp/nerdfont.zip
    rm "$USER_HOME"/.fonts/{LICENSE,README.md}
    chown "$SUDO_USER:$SUDO_USER" -R "$USER_HOME"/.fonts
    profile=$(gsettings get org.gnome.Terminal.ProfilesList default)
    profile=${profile:1:-1} # remove leading and trailing single quotes
    gsettings set "org.gnome.Terminal.Legacy.Profile:/org/gnome/terminal/legacy/profiles:/:$profile/" font '0xProto Nerd Font 14'
else
    show 'Already installed. Skipping!'
fi

show "Cleaning up via autoremove..."
apt-get autoremove -y
show_done

show "Setting bashrc and profile paths and prompts..."
declare -r PATH_SETTINGS_BANNER='# PATH Additions'
if [ -e "$USER_RC" ] && grep -q -F "$PATH_SETTINGS_BANNER" "$USER_RC"; then
    show 'Already installed. Skipping!'
else
    cat "$SCRIPT_DIR"/dedup_paths.sh >> "$USER_RC"
    (
        echo "$PATH_SETTINGS_BANNER"
        for addition in "${path_additions[@]}"; do
            echo "prepend_path $addition"
        done

        echo
        echo 'dedup_paths'
        echo
        echo "PS1='\w$ '"
        echo
        echo 'eval "$(direnv hook bash)"'
        echo 'eval "$(starship init bash)"'
    ) >> "$USER_RC"
    chown "$SUDO_USER:$SUDO_USER" -R "$USER_HOME"/.bashrc
    installUser "$USER_HOME"/.config "$SCRIPT_DIR"/starship.toml
    show_done
fi
