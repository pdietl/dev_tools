#!/bin/bash

set -eu
set -o pipefail

show() {
    echo
    echo "***"
    echo "*** $@"
    echo "***"
    echo
}

show_done() {
    show "Done."
}

file_append_line() {
    local file=$1
    local line=$2

    echo -n "Checking file '$file' for line '$line'... "

    if ! $(grep -q -F "$line" "$file"); then
        echo "no, appending"
        echo "$line" >> "$file"
    else
        echo "yes"
    fi
}

if [[ $EUID -ne 0 ]]; then
   show "This script must be run as root"
   exit 1
fi

if [ -z "${SUDO_USER:-}" ]; then
    echo "ERROR! The 'SUDO_USER' variable is blank! I was depending on that to determine who called me. :(" >&2
    exit 1
fi

if ! grep -q 'ubuntu' /etc/os-release; then
    echo "Error: I don't think you're running Ubuntu and I only know how to initialize that system." >&2
    exit 1
fi

declare -r USER_HOME=/home/$SUDO_USER

show "Updating packages..."
apt-get update
apt-get upgrade -y
show_done

show "Installing packages..."
apt-get install -y \
    aptitude \
    asciinema \
    autoconf \
    autopoint \
    autossh \
    autotools-dev \
    awscli \
    bison \
    build-essential \
    ccache \
    clang-format \
    cmake \
    cppcheck \
    cscope \
    curl \
    ddd \
    direnv \
    docker.io \
    dos2unix \
    exuberant-ctags \
    flex \
    gawk \
    gcc-multilib \
    gdb-multiarch \
    gparted \
    graphviz \
    htop \
    hwinfo \
    indent \
    jq \
    libssl-dev \
    libvirt-clients \
    libvirt-dev \
    linux-tools-generic \
    nasm \
    net-tools \
    ninja-build \
    openjdk-8-jdk \
    openjdk-8-jdk-headless \
    openssh-server \
    openssh-server \
    p7zip-full \
    packer \
    picocom \
    pre-commit \
    protobuf-compiler \
    pv \
    python3-pip \
    python3-stestr \
    python3-venv \
    qemu \
    qemu-kvm \
    qemu-system-x86 \
    remake \
    ripgrep \
    rlwrap \
    rpm \
    ruby \
    ruby-dev \
    shellcheck \
    sshfs \
    texinfo \
    tmate \
    tmux \
    tree \
    uuid \
    uuid-dev \
    valgrind \
    vim \
    virtualenv \
    zlib1g-dev
show_done

show "Installing Signal..."
# Taken from https://signal.org/en/download/linux/
# NOTE: These instructions only work for 64 bit Debian-based
# Linux distributions such as Ubuntu, Mint etc.
if command -v signal-desktop > /dev/null; then
    show 'Already installed. Skipping!'
else
    # 1. Install our official public software signing key
    wget -O- https://updates.signal.org/desktop/apt/keys.asc | gpg --dearmor > /tmp/signal-desktop-keyring.gpg
    cat /tmp/signal-desktop-keyring.gpg > /usr/share/keyrings/signal-desktop-keyring.gpg

    # 2. Add our repository to your list of repositories
    echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/signal-desktop-keyring.gpg] https://updates.signal.org/desktop/apt xenial main' > /etc/apt/sources.list.d/signal-xenial.list

    # 3. Update your package database and install signal
    apt-get update && apt-get install -y signal-desktop
fi
show_done

show "Installing Discord..."
if command -v discord > /dev/null; then
    show 'Already installed. Skipping!'
else
    wget -O /tmp/discord.deb 'https://discordapp.com/api/download?platform=linux&format=deb'
    apt-get install -y /tmp/discord.deb
fi
show_done

show "Installing Slack..."
if command -v slack > /dev/null; then
    show 'Already installed. Skipping!'
else
    snap install slack
fi
show_done

show "Installing Postman..."
if command -v postman > /dev/null; then
    show 'Already installed. Skipping!'
else
    snap install postman
fi
show_done

show "Installing Teleport..."
if command -v tsh > /dev/null; then
    show 'Already installed. Skipping!'
else
    curl https://apt.releases.teleport.dev/gpg -o /usr/share/keyrings/teleport-archive-keyring.asc
    source /etc/os-release
    echo "deb [signed-by=/usr/share/keyrings/teleport-archive-keyring.asc] \
    https://apt.releases.teleport.dev/${ID?} ${VERSION_CODENAME?} stable/v12" \
    > /etc/apt/sources.list.d/teleport.list

    apt-get update
    apt-get install -y teleport
fi
show_done

show "Allowing no password when using sudo..."
sed -i 's/^%sudo.*/%sudo ALL=NOPASSWD: ALL/' /etc/sudoers
show_done

show "Setting up Docker..."
show "Adding user '$SUDO_USER' to docker group..."
if groups "$SUDO_USER" | grep -q 'docker'; then
    show "User '$SUDO_USER' is already a member of the docker group. Skipping!"
else
    usermod -a -G docker "$SUDO_USER"
    show_done
fi

show "Sanity checking docker AS '$SUDO_USER' via docker.io..."

# We are running as root but we want to try
# running docker as the user who used sudo
if ! su -c 'docker run hello-world' "$SUDO_USER"; then
    show "ERROR! Docker is misconfigured. Please contact a human for help."
    exit 1
fi
show_done

show "Installing default vimrc..."
if [ -e "/home/$SUDO_USER/.vimrc" ]; then
    show 'Already installed. Skipping!'
else
    install --owner $SUDO_USER --group $SUDO_USER \
        vimrc /home/$SUDO_USER/.vimrc
    install --owner $SUDO_USER --group $SUDO_USER \
        -Dt /home/$SUDO_USER/.vim/pack/plugins/start/cscope/plugin/ \
        cscope_maps.vim
    mkdir -p /home/$SUDO_USER/.vim/spell
    chown $SUDO_USER:$SUDO_USER -R /home/$SUDO_USER/.vim
    show_done
fi

show "Installing default tmux conf..."
if [ -e "/home/$SUDO_USER/.tmux.conf" ]; then
    show 'Already installed. Skipping!'
else
    install --owner $SUDO_USER --group $SUDO_USER \
        tmux.conf /home/$SUDO_USER/.tmux.conf
    show_done
fi

declare -r USER_RC=$USER_HOME/.bashrc

show "Removing useless home directories..."
rm -rf /home/$SUDO_USER/{Public,Templates,Videos,Pictures,Music}
show_done

show "Installing Rust and Cargo..."
if [ -e $USER_HOME/.cargo/env ]; then
    show 'Already installed. Skipping!'
else
	sudo -u "$SUDO_USER" -- curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sudo -u "$SUDO_USER" -- sh -s -- -y
    echo >> "$USER_RC"
	show_done
fi

show "Generating SSH Key pair..."
declare -r KEY_TYPE=ed25519
declare -r KEY_PATH=/home/$SUDO_USER/.ssh/id_$KEY_TYPE
if [ -e "$KEY_PATH" ]; then
    show 'Already generated. Skipping!'
else
    sudo -H -u "$SUDO_USER" ssh-keygen -t "$KEY_TYPE" -N '' -f "$KEY_PATH"
fi
show_done

declare -r PATH_SETTINGS_BANNER='# PATH Additions'

show "Setting bashrc and profile paths and prompts..."
if grep -q -F "$PATH_SETTINGS_BANNER" "$USER_RC"; then
    show 'Already installed. Skipping!'
else
    (
        echo
        echo "$PATH_SETTINGS_BANNER"
        echo 'PATH=$HOME/bin:$PATH'
        echo 'PATH=$HOME/.local/bin:$PATH'
        echo
        echo "PS1='\w$ '"
        echo
        echo 'if ! sudo service udev status | grep -q '\''is running$'\''; then'
        echo '    sudo service udev restart'
        echo 'fi'
        echo
        echo 'eval "$(direnv hook bash)"'
    ) >> "$USER_RC"
    show_done
fi

declare -r BIN_DEST=$USER_HOME/bin

show "Installing user binaries into $BIN_DEST..."
if ! [ -e "$BIN_DEST" ]; then
    install --owner $SUDO_USER --group $SUDO_USER \
        -Dt "$BIN_DEST" \
        bin/*
    chown $SUDO_USER:$SUDO_USER -R "$BIN_DEST"
    show_done
else
    show "$BIN_DEST already exists. Skipping!"
fi

if ! [ -e "$USER_HOME/.gitconfig" ]; then
    echo '[user]
    name = Pete Dietl
    email = petedietl@gmail.com
[core]
    editor = vim' > "$USER_HOME/.gitconfig"
    chown $SUDO_USER:$SUDO_USER "$USER_HOME/.gitconfig"
fi

show "Set GNOME settings..."
if command -v gsettings > /dev/null; then
    show "Setting GNOME to use 12-hr time..."
    sudo -H -u "$SUDO_USER" DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/"$(id -u "$SUDO_USER")"/bus gsettings set org.gnome.desktop.interface clock-format 12h
    show_done
	show "Setting GNOME desktop favorite apps..."
	favorite_apps="[
		'firefox_firefox.desktop',
		'org.gnome.Nautilus.desktop',
		'signal-desktop.desktop',
		'discord.desktop',
		'slack_slack.desktop'
	]"
	sudo -H -u "$SUDO_USER" DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/"$(id -u "$SUDO_USER")"/bus gsettings set org.gnome.shell favorite-apps "$favorite_apps"
else
	show "GNOME shell not present. Skipping!"
fi
show_done
